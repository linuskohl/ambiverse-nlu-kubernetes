apiVersion: "apps/v1beta1"
kind: StatefulSet
metadata:
  name: neo4j
  namespace: nlu-ambiverse
  labels:
    app: neo4j
spec:
  serviceName: neo4j
  replicas: 1
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
    spec:
      containers:
      - name: neo4j
        image: "ambiverse/kg-db-neo4j"
        imagePullPolicy: Always
        env:
          - name: DUMP_NAME
            valueFrom: 
              configMapKeyRef:
                name: nlu-ambiverse-config
                key: DUMP_NAME
          - name: NEO4J_dbms_active__database
            valueFrom: 
              configMapKeyRef:
                name: nlu-ambiverse-config
                key: NEO4J_dbms_active__database
          - name: NEO4J_dbms_memory_pagecache_size
            valueFrom: 
              configMapKeyRef:
                name: nlu-ambiverse-config
                key: NEO4J_dbms_memory_pagecache_size
          - name: NEO4J_dbms_memory_heap_initial__size
            valueFrom: 
              configMapKeyRef:
                name: nlu-ambiverse-config
                key: NEO4J_dbms_memory_heap_initial__size
          - name: NEO4J_dbms_memory_heap_max__size
            valueFrom: 
              configMapKeyRef:
                name: nlu-ambiverse-config
                key: NEO4J_dbms_memory_heap_max__size
          - name: NEO4J_dbms_connectors_default__listen__address
            valueFrom: 
              configMapKeyRef:
                name: nlu-ambiverse-config
                key: NEO4J_dbms_connectors_default__listen__address
          - name: NEO4J_dbms_security_procedures_unrestricted
            valueFrom: 
              configMapKeyRef:
                name: nlu-ambiverse-config
                key: NEO4J_dbms_security_procedures_unrestricted
          - name: NEO4J_AUTH
            valueFrom: 
              configMapKeyRef:
                name: nlu-ambiverse-config
                key: NEO4J_AUTH
          - name: NEO4J_dbms_mode
            value: CORE
          - name: NUMBER_OF_CORES
            value: "3"
          - name: NEO4J_dbms_security_auth__enabled
            value: "false"
          - name: NEO4J_causal__clustering_discovery__type
            value: DNS
          - name: NEO4J_causal__clustering_initial__discovery__members
            value: "neo4j.default.svc.cluster.local:5000"
          - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
            value: "yes"
        command:
          - "/bin/bash"
          - "-c"
          - |
            export NEO4J_dbms_connectors_default__advertised__address=$(hostname -f)
            export NEO4J_causal__clustering_discovery__advertised__address=$(hostname -f):5000
            export NEO4J_causal__clustering_transaction__advertised__address=$(hostname -f):6000
            export NEO4J_causal__clustering_raft__advertised__address=$(hostname -f):7000
            exec /docker-entrypoint.sh "neo4j"
        ports:
        - containerPort: 5000
          name: discovery
        - containerPort: 7000
          name: raft
        - containerPort: 6000
          name: tx
        - containerPort: 7474
          name: browser
        - containerPort: 7687
          name: bolt
        - containerPort: 6362
          name: backup
        securityContext:
          privileged: true
        volumeMounts:
        - name: datadir
          mountPath: "/data"
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: neo4j-ssd
        resources:
          requests:
            storage: "150Gi"
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: neo4j-ssd
  namespace: nlu-ambiverse
provisioner: kubernetes.io/gce-pd
parameters:
  type: pd-ssd
  replication-type: none
